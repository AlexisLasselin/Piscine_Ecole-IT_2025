
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEQLTLEQGTGEQleftPLUSMINUSleftTIMESDIVIDErightUMINUSBLOCK_END BLOCK_START BOOLEAN COMMENT DIVIDE ELSE ELSEIF EQ EQUALS FOR GEQ GT IDENTIFIER IF IN LEQ LPAREN LT MINUS NEQ NULL NUMBER PLUS PRINT RANGE RPAREN SEMICOLON STRING TIMES WHILEprogram : statement_list_optstatement_list_opt : statement_list\n| emptystatement_list : statement_list statement\n| statementstatement : assignment\n| print_stmt\n| if_stmt\n| while_stmt\n| for_stmt\n| COMMENTassignment : IDENTIFIER EQUALS expressionprint_stmt : PRINT LPAREN expression RPAREN\nif_stmt : IF expression BLOCK_START statement_list_opt BLOCK_END elif_list else_part\nelif_list : emptyelif_list : ELSEIF expression BLOCK_START statement_list_opt BLOCK_ENDelif_list : elif_list ELSEIF expression BLOCK_START statement_list_opt BLOCK_ENDelse_part : emptyelse_part : ELSE BLOCK_START statement_list_opt BLOCK_ENDwhile_stmt : WHILE expression BLOCK_START statement_list_opt BLOCK_ENDfor_stmt : FOR IDENTIFIER IN RANGE LPAREN NUMBER RPAREN BLOCK_START statement_list_opt BLOCK_ENDexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression EQ expression\n| expression NEQ expression\n| expression LT expression\n| expression LEQ expression\n| expression GT expression\n| expression GEQ expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : BOOLEANexpression : NULLexpression : STRINGexpression : IDENTIFIERempty :'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,17,23,24,25,26,27,30,43,47,49,50,51,52,53,54,55,56,57,58,59,62,63,65,66,69,71,84,85,86,87,],[-39,0,-1,-2,-3,-5,-6,-7,-8,-9,-10,-11,-4,-34,-35,-36,-37,-38,-12,-32,-13,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-33,-39,-20,-39,-15,-14,-18,-19,-16,-21,-17,]),'COMMENT':([0,3,5,6,7,8,9,10,11,17,23,24,25,26,27,30,32,43,45,47,49,50,51,52,53,54,55,56,57,58,59,62,63,65,66,69,71,76,77,78,79,84,85,86,87,],[11,11,-5,-6,-7,-8,-9,-10,-11,-4,-34,-35,-36,-37,-38,-12,11,-32,11,-13,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-33,-39,-20,-39,-15,-14,-18,11,11,11,11,-19,-16,-21,-17,]),'IDENTIFIER':([0,3,5,6,7,8,9,10,11,14,15,16,17,18,19,21,22,23,24,25,26,27,30,32,33,34,35,36,37,38,39,40,41,42,43,45,47,49,50,51,52,53,54,55,56,57,58,59,62,63,65,66,67,69,70,71,76,77,78,79,84,85,86,87,],[12,12,-5,-6,-7,-8,-9,-10,-11,27,27,29,-4,27,27,27,27,-34,-35,-36,-37,-38,-12,12,27,27,27,27,27,27,27,27,27,27,-32,12,-13,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-33,-39,-20,-39,-15,27,-14,27,-18,12,12,12,12,-19,-16,-21,-17,]),'PRINT':([0,3,5,6,7,8,9,10,11,17,23,24,25,26,27,30,32,43,45,47,49,50,51,52,53,54,55,56,57,58,59,62,63,65,66,69,71,76,77,78,79,84,85,86,87,],[13,13,-5,-6,-7,-8,-9,-10,-11,-4,-34,-35,-36,-37,-38,-12,13,-32,13,-13,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-33,-39,-20,-39,-15,-14,-18,13,13,13,13,-19,-16,-21,-17,]),'IF':([0,3,5,6,7,8,9,10,11,17,23,24,25,26,27,30,32,43,45,47,49,50,51,52,53,54,55,56,57,58,59,62,63,65,66,69,71,76,77,78,79,84,85,86,87,],[14,14,-5,-6,-7,-8,-9,-10,-11,-4,-34,-35,-36,-37,-38,-12,14,-32,14,-13,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-33,-39,-20,-39,-15,-14,-18,14,14,14,14,-19,-16,-21,-17,]),'WHILE':([0,3,5,6,7,8,9,10,11,17,23,24,25,26,27,30,32,43,45,47,49,50,51,52,53,54,55,56,57,58,59,62,63,65,66,69,71,76,77,78,79,84,85,86,87,],[15,15,-5,-6,-7,-8,-9,-10,-11,-4,-34,-35,-36,-37,-38,-12,15,-32,15,-13,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-33,-39,-20,-39,-15,-14,-18,15,15,15,15,-19,-16,-21,-17,]),'FOR':([0,3,5,6,7,8,9,10,11,17,23,24,25,26,27,30,32,43,45,47,49,50,51,52,53,54,55,56,57,58,59,62,63,65,66,69,71,76,77,78,79,84,85,86,87,],[16,16,-5,-6,-7,-8,-9,-10,-11,-4,-34,-35,-36,-37,-38,-12,16,-32,16,-13,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-33,-39,-20,-39,-15,-14,-18,16,16,16,16,-19,-16,-21,-17,]),'BLOCK_END':([3,4,5,6,7,8,9,10,11,17,23,24,25,26,27,30,32,43,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,65,66,69,71,76,77,78,79,80,81,82,83,84,85,86,87,],[-2,-3,-5,-6,-7,-8,-9,-10,-11,-4,-34,-35,-36,-37,-38,-12,-39,-32,-39,-13,62,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-33,63,-39,-20,-39,-15,-14,-18,-39,-39,-39,-39,84,85,86,87,-19,-16,-21,-17,]),'EQUALS':([12,],[18,]),'LPAREN':([13,14,15,18,19,21,22,33,34,35,36,37,38,39,40,41,42,61,67,70,],[19,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,64,22,22,]),'MINUS':([14,15,18,19,20,21,22,23,24,25,26,27,28,30,31,33,34,35,36,37,38,39,40,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,67,70,73,75,],[21,21,21,21,34,21,21,-34,-35,-36,-37,-38,34,34,34,21,21,21,21,21,21,21,21,21,21,-32,34,-22,-23,-24,-25,34,34,34,34,34,34,-33,21,21,34,34,]),'NUMBER':([14,15,18,19,21,22,33,34,35,36,37,38,39,40,41,42,64,67,70,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,68,23,23,]),'BOOLEAN':([14,15,18,19,21,22,33,34,35,36,37,38,39,40,41,42,67,70,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'NULL':([14,15,18,19,21,22,33,34,35,36,37,38,39,40,41,42,67,70,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'STRING':([14,15,18,19,21,22,33,34,35,36,37,38,39,40,41,42,67,70,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'BLOCK_START':([20,23,24,25,26,27,28,43,49,50,51,52,53,54,55,56,57,58,59,72,73,74,75,],[32,-34,-35,-36,-37,-38,45,-32,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-33,76,77,78,79,]),'PLUS':([20,23,24,25,26,27,28,30,31,43,44,49,50,51,52,53,54,55,56,57,58,59,73,75,],[33,-34,-35,-36,-37,-38,33,33,33,-32,33,-22,-23,-24,-25,33,33,33,33,33,33,-33,33,33,]),'TIMES':([20,23,24,25,26,27,28,30,31,43,44,49,50,51,52,53,54,55,56,57,58,59,73,75,],[35,-34,-35,-36,-37,-38,35,35,35,-32,35,35,35,-24,-25,35,35,35,35,35,35,-33,35,35,]),'DIVIDE':([20,23,24,25,26,27,28,30,31,43,44,49,50,51,52,53,54,55,56,57,58,59,73,75,],[36,-34,-35,-36,-37,-38,36,36,36,-32,36,36,36,-24,-25,36,36,36,36,36,36,-33,36,36,]),'EQ':([20,23,24,25,26,27,28,30,31,43,44,49,50,51,52,53,54,55,56,57,58,59,73,75,],[37,-34,-35,-36,-37,-38,37,37,37,-32,37,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-33,37,37,]),'NEQ':([20,23,24,25,26,27,28,30,31,43,44,49,50,51,52,53,54,55,56,57,58,59,73,75,],[38,-34,-35,-36,-37,-38,38,38,38,-32,38,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-33,38,38,]),'LT':([20,23,24,25,26,27,28,30,31,43,44,49,50,51,52,53,54,55,56,57,58,59,73,75,],[39,-34,-35,-36,-37,-38,39,39,39,-32,39,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-33,39,39,]),'LEQ':([20,23,24,25,26,27,28,30,31,43,44,49,50,51,52,53,54,55,56,57,58,59,73,75,],[40,-34,-35,-36,-37,-38,40,40,40,-32,40,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-33,40,40,]),'GT':([20,23,24,25,26,27,28,30,31,43,44,49,50,51,52,53,54,55,56,57,58,59,73,75,],[41,-34,-35,-36,-37,-38,41,41,41,-32,41,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-33,41,41,]),'GEQ':([20,23,24,25,26,27,28,30,31,43,44,49,50,51,52,53,54,55,56,57,58,59,73,75,],[42,-34,-35,-36,-37,-38,42,42,42,-32,42,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-33,42,42,]),'RPAREN':([23,24,25,26,27,31,43,44,49,50,51,52,53,54,55,56,57,58,59,68,],[-34,-35,-36,-37,-38,47,-32,59,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-33,74,]),'IN':([29,],[46,]),'RANGE':([46,],[61,]),'ELSEIF':([62,65,66,85,87,],[67,70,-15,-16,-17,]),'ELSE':([62,65,66,85,87,],[-39,72,-15,-16,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list_opt':([0,32,45,76,77,78,79,],[2,48,60,80,81,82,83,]),'statement_list':([0,32,45,76,77,78,79,],[3,3,3,3,3,3,3,]),'empty':([0,32,45,62,65,76,77,78,79,],[4,4,4,66,71,4,4,4,4,]),'statement':([0,3,32,45,76,77,78,79,],[5,17,5,5,5,5,5,5,]),'assignment':([0,3,32,45,76,77,78,79,],[6,6,6,6,6,6,6,6,]),'print_stmt':([0,3,32,45,76,77,78,79,],[7,7,7,7,7,7,7,7,]),'if_stmt':([0,3,32,45,76,77,78,79,],[8,8,8,8,8,8,8,8,]),'while_stmt':([0,3,32,45,76,77,78,79,],[9,9,9,9,9,9,9,9,]),'for_stmt':([0,3,32,45,76,77,78,79,],[10,10,10,10,10,10,10,10,]),'expression':([14,15,18,19,21,22,33,34,35,36,37,38,39,40,41,42,67,70,],[20,28,30,31,43,44,49,50,51,52,53,54,55,56,57,58,73,75,]),'elif_list':([62,],[65,]),'else_part':([65,],[69,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list_opt','program',1,'p_program','parser.py',109),
  ('statement_list_opt -> statement_list','statement_list_opt',1,'p_statement_list_opt','parser.py',114),
  ('statement_list_opt -> empty','statement_list_opt',1,'p_statement_list_opt','parser.py',115),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',119),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',120),
  ('statement -> assignment','statement',1,'p_statement','parser.py',135),
  ('statement -> print_stmt','statement',1,'p_statement','parser.py',136),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',137),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',138),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',139),
  ('statement -> COMMENT','statement',1,'p_statement','parser.py',140),
  ('assignment -> IDENTIFIER EQUALS expression','assignment',3,'p_assignment','parser.py',149),
  ('print_stmt -> PRINT LPAREN expression RPAREN','print_stmt',4,'p_print_stmt','parser.py',154),
  ('if_stmt -> IF expression BLOCK_START statement_list_opt BLOCK_END elif_list else_part','if_stmt',7,'p_if_stmt','parser.py',160),
  ('elif_list -> empty','elif_list',1,'p_elif_list_empty','parser.py',175),
  ('elif_list -> ELSEIF expression BLOCK_START statement_list_opt BLOCK_END','elif_list',5,'p_elif_list_one','parser.py',179),
  ('elif_list -> elif_list ELSEIF expression BLOCK_START statement_list_opt BLOCK_END','elif_list',6,'p_elif_list_many','parser.py',183),
  ('else_part -> empty','else_part',1,'p_else_part_empty','parser.py',187),
  ('else_part -> ELSE BLOCK_START statement_list_opt BLOCK_END','else_part',4,'p_else_part','parser.py',191),
  ('while_stmt -> WHILE expression BLOCK_START statement_list_opt BLOCK_END','while_stmt',5,'p_while_stmt','parser.py',196),
  ('for_stmt -> FOR IDENTIFIER IN RANGE LPAREN NUMBER RPAREN BLOCK_START statement_list_opt BLOCK_END','for_stmt',10,'p_for_stmt','parser.py',201),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',211),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',212),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',213),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',214),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',215),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','parser.py',216),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',217),
  ('expression -> expression LEQ expression','expression',3,'p_expression_binop','parser.py',218),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',219),
  ('expression -> expression GEQ expression','expression',3,'p_expression_binop','parser.py',220),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',224),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',228),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',232),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean','parser.py',247),
  ('expression -> NULL','expression',1,'p_expression_null','parser.py',253),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',257),
  ('expression -> IDENTIFIER','expression',1,'p_expression_var','parser.py',267),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',274),
]
